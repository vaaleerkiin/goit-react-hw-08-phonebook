{"version":3,"file":"static/js/878.8ebc75a5.chunk.js","mappings":"4LAEaA,E,QAAYC,EAAAA,QAAH,2UACJ,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,KAAvB,IAKD,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOE,KAAvB,I,SCPdC,EAAa,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAAkB,SAACR,EAAD,UAAYQ,GAA9B,C,8LCIbC,EAAe,WAC1B,OACEC,EAAAA,EAAAA,MADF,eAAOC,EAAP,YAAuBC,EAAvB,EAAuBA,gBAAiBC,EAAxC,EAAwCA,UAAWC,EAAnD,EAAmDA,QAmBnD,OAZAC,EAAAA,EAAAA,YAAU,YACHH,GAAmBE,GACtBE,EAAAA,GAAAA,MAAY,OAEf,GAAE,CAACF,EAASF,KAEbG,EAAAA,EAAAA,YAAU,YACHH,GAAmBC,GACtBG,EAAAA,GAAAA,QAAc,UAEjB,GAAE,CAACH,EAAWD,KAGb,iCACE,sCACA,UAAC,IAAD,CACEK,KAAK,QACLC,SAAU,CAAEC,KAAM,GAClBC,MAAO,CAAEC,MAAO,QAChBC,cAAe,CAAEC,UAAU,GAC3BC,SAxBW,SAAAC,GACfd,EAAac,EACd,EAiBG,WAOE,SAAC,SAAD,CACEC,MAAM,WACNT,KAAK,OACLU,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,IAC3B,CACEC,UAAU,WAAD,wBAAE,WAAOC,EAAGC,GAAV,oEACJA,EADI,yCAEAC,QAAQC,OACb,IAAIC,MAAM,iCAHL,YAKEH,EAAMI,OAAOC,OAAS,GALxB,yCAMAJ,QAAQC,OACb,IAAIC,MAAM,4CAPL,2CAAF,qDAAC,KANhB,UAoBE,SAAC,IAAD,OAEF,SAAC,SAAD,CACET,MAAM,QACNT,KAAK,QACLU,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,IAC3B,CACEC,UAAU,WAAD,wBAAE,WAAOC,EAAGO,GAAV,oEACJA,EADI,yCAEAL,QAAQC,OAAO,IAAIC,MAAM,6BAFzB,YAGEG,EAAKF,OAAOC,OAAS,GAHvB,yCAIAJ,QAAQC,OACb,IAAIC,MAAM,wCALL,2CAAF,qDAAC,KANhB,UAkBE,SAAC,IAAD,OAEF,SAAC,SAAD,CACET,MAAM,WACNT,KAAK,WACLU,MAAO,CACL,CAAEC,UAAU,EAAMC,QAAS,IAC3B,CACEC,UAAU,WAAD,wBAAE,WAAOC,EAAGQ,GAAV,oEACJA,EADI,yCAEAN,QAAQC,OACb,IAAIC,MAAM,iCAHL,YAKEI,EAASH,OAAOC,OAAS,GAL3B,yCAMAJ,QAAQC,OACb,IAAIC,MAAM,4CAPL,2CAAF,qDAAC,KANhB,UAoBE,SAAC,aAAD,OAGF,SAAC,SAAD,CAAWK,WAAY,CAAEC,OAAQ,GAAItB,KAAM,IAA3C,UACE,SAAC,KAAD,CAAQuB,KAAK,UAAUC,SAAS,SAASC,KAAK,QAA9C,2BAOT,ECjGD,EARiB,WACf,OACE,SAAC5C,EAAA,EAAD,WACE,SAACS,EAAD,KAGL,C","sources":["components/Containers/Container.styled.jsx","components/Containers/Container.jsx","components/Register/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.section`\n  border: solid ${props => props.theme.colors.black} 1px;\n  max-width: 500px;\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  background-color: ${props => props.theme.colors.white};\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  gap: 16px;\n  padding: 16px;\n  border-radius: 8px;\n  overflow: hidden;\n`;\n","import { Container } from 'components/Containers/Container.styled';\nexport const Containers = ({ children }) => <Container>{children}</Container>;\n","import { useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { Button, Form, Input } from 'antd';\nimport { useRegisterMutation } from 'redux/Auth/operations';\n\nexport const RegisterForm = () => {\n  const [postRegister, { isUninitialized, isSuccess, isError }] =\n    useRegisterMutation();\n\n  const onFinish = values => {\n    postRegister(values);\n  };\n\n  useEffect(() => {\n    if (!isUninitialized && isError) {\n      toast.error('Fail');\n    }\n  }, [isError, isUninitialized]);\n\n  useEffect(() => {\n    if (!isUninitialized && isSuccess) {\n      toast.success('Success');\n    }\n  }, [isSuccess, isUninitialized]);\n\n  return (\n    <>\n      <h1>Register</h1>\n      <Form\n        name=\"basic\"\n        labelCol={{ span: 4 }}\n        style={{ width: '100%' }}\n        initialValues={{ remember: true }}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          label=\"Username\"\n          name=\"name\"\n          rules={[\n            { required: true, message: '' },\n            {\n              validator: async (_, names) => {\n                if (!names) {\n                  return Promise.reject(\n                    new Error('Please input your username!')\n                  );\n                } else if (names.trim().length < 6) {\n                  return Promise.reject(\n                    new Error('Please input your username! (Min is 6)')\n                  );\n                }\n              },\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"Email\"\n          name=\"email\"\n          rules={[\n            { required: true, message: '' },\n            {\n              validator: async (_, mail) => {\n                if (!mail) {\n                  return Promise.reject(new Error('Please input your mail!'));\n                } else if (mail.trim().length < 8) {\n                  return Promise.reject(\n                    new Error('Please input your mail! (Min is 8)')\n                  );\n                }\n              },\n            },\n          ]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item\n          label=\"Password\"\n          name=\"password\"\n          rules={[\n            { required: true, message: '' },\n            {\n              validator: async (_, password) => {\n                if (!password) {\n                  return Promise.reject(\n                    new Error('Please input your password!')\n                  );\n                } else if (password.trim().length < 6) {\n                  return Promise.reject(\n                    new Error('Please input your password! (Min is 8)')\n                  );\n                }\n              },\n            },\n          ]}\n        >\n          <Input.Password />\n        </Form.Item>\n\n        <Form.Item wrapperCol={{ offset: 10, span: 16 }}>\n          <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n            Submit\n          </Button>\n        </Form.Item>\n      </Form>\n    </>\n  );\n};\n","import { Containers } from 'components/Containers/Container';\nimport { RegisterForm } from 'components/Register/RegisterForm';\n\nconst Register = () => {\n  return (\n    <Containers>\n      <RegisterForm />\n    </Containers>\n  );\n};\n\nexport default Register;\n"],"names":["Container","styled","props","theme","colors","black","white","Containers","children","RegisterForm","useRegisterMutation","postRegister","isUninitialized","isSuccess","isError","useEffect","toast","name","labelCol","span","style","width","initialValues","remember","onFinish","values","label","rules","required","message","validator","_","names","Promise","reject","Error","trim","length","mail","password","wrapperCol","offset","type","htmlType","size"],"sourceRoot":""}